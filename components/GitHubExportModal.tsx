import React, { useState, useEffect } from 'react';
import type { AnalysisResult } from '../types';
import { useLanguage } from '../contexts/LanguageContext';
import { CloseIcon, GitHubIcon, ButtonSpinner, ExclamationTriangleIcon } from './Icons';

interface GitHubExportModalProps {
  isOpen: boolean;
  onClose: () => void;
  results: AnalysisResult[];
  imagePreviewUrl: string;
}

type Status = 'idle' | 'loading' | 'success' | 'error';

const GitHubExportModal: React.FC<GitHubExportModalProps> = ({ isOpen, onClose, results, imagePreviewUrl }) => {
  const { translations } = useLanguage();
  const [details, setDetails] = useState({ owner: '', repo: '', path: '', token: '' });
  const [status, setStatus] = useState<Status>('idle');
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Reset state when modal is opened or closed
    if (isOpen) {
      setStatus('idle');
      setError(null);
      const savedOwner = sessionStorage.getItem('github_owner') || '';
      const savedRepo = sessionStorage.getItem('github_repo') || '';
      const defaultPath = `reports/analysis-${new Date().toISOString()}.md`;
      setDetails(prev => ({ ...prev, owner: savedOwner, repo: savedRepo, path: defaultPath }));
    }
  }, [isOpen]);
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setDetails(prev => ({ ...prev, [name]: value }));
  };

  const generateMarkdown = (): string => {
    let md = `# Crop Disease Analysis Report\n\n`;
    md += `**Date:** ${new Date().toLocaleString()}\n\n`;
    md += `![Analyzed Crop](${imagePreviewUrl})\n\n`;
    md += `---\n\n`;
    md += `## Identified Issues Summary\n\n`;

    results.forEach((result, index) => {
        md += `### Issue #${index + 1}: ${result.plant_name} - ${result.is_healthy ? 'Healthy' : result.disease_name}\n\n`;
        md += `**Description:**\n${result.description}\n\n`;
        
        const formatList = (title: string, items: string[]) => {
            md += `**${title}:**\n`;
            if (items.length > 0) {
                md += items.map(item => `- ${item}`).join('\n') + '\n\n';
            } else {
                md += `N/A\n\n`;
            }
        };

        formatList('Early Stress Signs', result.early_stress_signs);
        formatList('Organic Treatment Plan', result.treatment_plan_organic);
        formatList('Chemical Treatment Plan', result.treatment_plan_chemical);

        md += `**Climate Advisory:**\n${result.climate_advisory}\n\n`;
        md += `---\n\n`;
    });

    md += `*Report generated by the AI Crop Disease Detector.*`;
    return md;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!details.owner || !details.repo || !details.path || !details.token) {
        setError(translations.githubValidationError);
        setStatus('error');
        return;
    }

    setStatus('loading');
    setError(null);

    try {
        const markdownContent = generateMarkdown();
        const content = btoa(unescape(encodeURIComponent(markdownContent)));

        const response = await fetch(`https://api.github.com/repos/${details.owner}/${details.repo}/contents/${details.path}`, {
            method: 'PUT',
            headers: {
                'Authorization': `token ${details.token}`,
                'Accept': 'application/vnd.github.v3+json',
            },
            body: JSON.stringify({
                message: `feat: Add crop analysis from AI Detector`,
                content: content,
                committer: {
                    name: 'AI Crop Disease Detector',
                    email: 'bot@aidc.com'
                }
            }),
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'GitHub API request failed');
        }
        
        setStatus('success');
        sessionStorage.setItem('github_owner', details.owner);
        sessionStorage.setItem('github_repo', details.repo);
    } catch (err: any) {
        console.error(err);
        setError(err.message || translations.githubExportError);
        setStatus('error');
    }
  };

  if (!isOpen) return null;

  return (
    <div 
        className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex justify-center items-center p-4 animate-fade-in"
        role="dialog"
        aria-modal="true"
        aria-labelledby="github-modal-title"
        onClick={onClose}
    >
      <div 
        className="bg-slate-800 border border-slate-700 rounded-xl p-6 w-full max-w-lg transform transition-all animate-bounce-in"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex justify-between items-center mb-4">
            <h2 id="github-modal-title" className="text-2xl font-bold text-slate-100 flex items-center gap-3">
                <GitHubIcon className="w-6 h-6" />
                {translations.githubModalTitle}
            </h2>
            <button onClick={onClose} className="p-1 rounded-full text-slate-400 hover:bg-slate-700">
                <CloseIcon />
            </button>
        </div>
        <p className="text-slate-400 mb-6">{translations.githubModalDescription}</p>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label htmlFor="owner" className="block text-sm font-medium text-slate-300 mb-1">{translations.githubOwnerLabel}</label>
                <input type="text" name="owner" id="owner" value={details.owner} onChange={handleInputChange} className="w-full bg-slate-900/50 border border-slate-600 rounded-md p-2 text-slate-200 focus:ring-2 focus:ring-green-500 outline-none" required />
              </div>
              <div>
                <label htmlFor="repo" className="block text-sm font-medium text-slate-300 mb-1">{translations.githubRepoLabel}</label>
                <input type="text" name="repo" id="repo" value={details.repo} onChange={handleInputChange} className="w-full bg-slate-900/50 border border-slate-600 rounded-md p-2 text-slate-200 focus:ring-2 focus:ring-green-500 outline-none" required />
              </div>
          </div>
          <div>
            <label htmlFor="path" className="block text-sm font-medium text-slate-300 mb-1">{translations.githubPathLabel}</label>
            <input type="text" name="path" id="path" value={details.path} onChange={handleInputChange} className="w-full bg-slate-900/50 border border-slate-600 rounded-md p-2 text-slate-200 focus:ring-2 focus:ring-green-500 outline-none" required />
          </div>
           <div>
            <label htmlFor="token" className="block text-sm font-medium text-slate-300 mb-1">{translations.githubTokenLabel}</label>
            <input type="password" name="token" id="token" value={details.token} onChange={handleInputChange} className="w-full bg-slate-900/50 border border-slate-600 rounded-md p-2 text-slate-200 focus:ring-2 focus:ring-green-500 outline-none" required />
            <p className="text-xs text-slate-500 mt-1 flex items-start gap-1.5">
                <ExclamationTriangleIcon className="w-4 h-4 flex-shrink-0 mt-0.5 text-amber-500" />
                <span>{translations.githubTokenWarning}</span>
            </p>
          </div>
          
          <div className="pt-4 flex flex-col items-center">
            <button
                type="submit"
                disabled={status === 'loading'}
                className="w-full sm:w-auto px-8 py-3 text-lg font-semibold text-white bg-green-600 rounded-lg shadow-md hover:bg-green-700 disabled:bg-slate-700 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-75 transition-all transform hover:scale-105 flex justify-center items-center gap-2"
            >
              {status === 'loading' ? (
                <>
                  <ButtonSpinner />
                  <span>{translations.githubExportingButton}</span>
                </>
              ) : (
                <>
                  <GitHubIcon />
                  <span>{translations.githubExportButton}</span>
                </>
              )}
            </button>
            {status === 'success' && <p className="text-green-400 mt-3 text-center">{translations.githubExportSuccess}</p>}
            {status === 'error' && <p className="text-red-400 mt-3 text-center">{error}</p>}
          </div>

        </form>
      </div>
    </div>
  );
};

export default GitHubExportModal;